>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
UnityEngine.Object.Instantiate<GameObject>(this.footstepFx, base.transform.position, Quaternion.identity);
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
if (!this.crouching || !this.grounded || !this.readyToJump)
>
//this.rb.AddForce(Vector3.down * 60f);
float num3 = x;
oat num4 = y;
214	if (PlayerStatus.SuSpeed)
{
this.SuSpeedPc = x15;
}
else
{
	this.SuSpeedPc = 1;
}
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
this.rb.AddForce(this.orientation.forward * num4 * this.moveSpeed * 0.02f * d2 * (float)this.SuSpeedPc);
this.rb.AddForce(this.orientation.right * num3 * this.moveSpeed * 0.02f * d * (float)this.SuSpeedPc);
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
return;
}
if (PlayerStatus.SuSpeed)
{
	this.rb.AddForce(Vector3.down * 5f);
	return;
}
this.rb.AddForce(Vector3.down * 60f);
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
if (PlayerStatus.SuFlightBool)
{
	this.jumps = 99999;
	this.rb.isKinematic = false;
	this.jumps = this.jumps;
	this.readyToJump = false;
	base.CancelInvoke("JumpCooldown");
	base.Invoke("JumpCooldown", 0.25f);
	this.resetJumpCounter = 0;
	float d = this.jumpForce * PowerupInventory.Instance.GetJumpMultiplier(null);
	if (PlayerStatus.SuOmegajump)
	{
		this.rb.AddForce(Vector3.up * d * 5f, ForceMode.Impulse);
		this.rb.AddForce(this.normalVector * d * 5f, ForceMode.Impulse);
	}
	else
	{
		this.rb.AddForce(Vector3.up * d * 1.5f, ForceMode.Impulse);
		this.rb.AddForce(this.normalVector * d * 0.5f, ForceMode.Impulse);
	}
	Vector3 velocity = this.rb.velocity;
	if (this.rb.velocity.y < 0.5f)
	{
		this.rb.velocity = new Vector3(velocity.x, 0f, velocity.z);
	}
	else if (this.rb.velocity.y > 0f)
	{
		this.rb.velocity = new Vector3(velocity.x, 0f, velocity.z);
	}
	ParticleSystem.VelocityOverLifetimeModule velocityOverLifetime = UnityEngine.Object.Instantiate<GameObject>(this.playerJumpSmokeFx, base.transform.position, Quaternion.LookRotation(Vector3.up)).GetComponent<ParticleSystem>().velocityOverLifetime;
	velocityOverLifetime.x = this.rb.velocity.x * 2f;
	velocityOverLifetime.z = this.rb.velocity.z * 2f;
	this.playerStatus.Jump();
	return;
}
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
float d2 = this.jumpForce * PowerupInventory.Instance.GetJumpMultiplier(null);
this.rb.AddForce(Vector3.up * d2 * 1.5f, ForceMode.Impulse);
this.rb.AddForce(this.normalVector * d2 * 0.5f, ForceMode.Impulse);
Vector3 velocity2 = this.rb.velocity;
>
>
this.rb.velocity = new Vector3(velocity2.x, 0f, velocity2.z);
>
>
>
this.rb.velocity = new Vector3(velocity2.x, 0f, velocity2.z);
>
ParticleSystem.VelocityOverLifetimeModule velocityOverLifetime2 = UnityEngine.Object.Instantiate<GameObject>(this.playerJumpSmokeFx, base.transform.position, Quaternion.LookRotation(Vector3.up)).GetComponent<ParticleSystem>().velocityOverLifetime;
velocityOverLifetime2.x = this.rb.velocity.x * 2f;
velocityOverLifetime2.z = this.rb.velocity.z * 2f;
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
ParticleSystem.VelocityOverLifetimeModule velocityOverLifetime = UnityEngine.Object.Instantiate<GameObject>(this.playerSmokeFx, point, Quaternion.LookRotation(base.transform.position - point)).GetComponent<ParticleSystem>().velocityOverLifetime;
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
private int SuSpeedPc;
>